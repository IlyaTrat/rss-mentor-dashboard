{"version":3,"sources":["components/table.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","students","mentor","tasks","matrix","thead","react_default","a","createElement","key","createMatrix","createTable","forEach","value","url","concat","push","className","href","rel","target","_this2","result","keys","taskKey","ind","task","name","taskStatus","status","val","pr","pullReqest","checkTask","index","elements","element","link","toLowerCase","studentTask","timestamp","Component","App","lastMentorId","localStorage","getItem","mentorsGitId","jsonResponse","mentors","gitMentorIdToName","e","input","children","window","setItem","setState","names","onSubmit","submit","bind","type","list","defaultValue","id","map","item","table","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d03a8c1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      students: props.students,\n      mentor: props.mentor,\n      tasks: props.tasks\n    }\n  }\n\n  render() {\n    let matrix;\n    let thead;\n    if(this.state.mentor) {\n      thead = [(<th key=\"anchor\"></th>)];\n      matrix = this.createMatrix(this.state.tasks, this.state.students, this.state.mentor);\n      matrix = this.createTable(matrix);\n      this.state.mentor.students.forEach(value => {\n        const url = \"https://github.com/\".concat(value);\n        thead.push((<th key={value} className={\"student-name\"}><a href={url} rel=\"noopener noreferrer\" target=\"_blank\">{value}</a></th>));\n      });\n    }\n    return (\n      <div className=\"tableMain\">\n        <table >\n          <thead>\n            <tr>\n              {thead}\n            </tr>\n          </thead>\n          <tbody>\n            {matrix}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n  createMatrix(tasks, students, mentor) {\n    const result = [];\n    const tasksKeys = Object.keys(tasks);\n    tasksKeys.forEach((taskKey, ind) => {\n      const task = tasks[taskKey];\n      task.name = taskKey;\n      const taskStatus = task.status;\n      result.push([task]);\n      mentor.students.forEach((val) => {\n        const pr = (students[val][taskKey].pullReqest)\n        result[ind].push([this.checkTask(taskStatus, students[val][taskKey]), pr]);\n      });\n    });\n    return result;\n  }\n\n  createTable(matrix) {\n    const result = []\n    matrix.forEach((value, index) => {\n      const elements = [];\n      value.forEach((val, ind) => {\n        let element; \n        if(ind === 0) {\n          if(val.link) {\n            const status = val.status.toLowerCase();\n            element = (<th className={status} key={val.name}><a href={val.link} rel=\"noopener noreferrer\" target=\"_blank\">{val.name}</a></th>);\n          } else {\n            const status = val.status.toLowerCase();\n            element = (<th className={status} key={val.name}>{val.name}</th>);\n          }\n        } else {\n          const key = value[0].name + ind;\n          if(val[1]) {\n            element = (<td className={val[0]} key={key}><a href={val[1]} rel=\"noopener noreferrer\" target=\"_blank\">{val[0]}</a></td>);\n          } else {\n            element = (<td className={val[0]} key={key}>{val[0]}</td>);\n          }\n        }\n        elements.push(element);\n      });\n      result.push((<tr key={index}>{elements}</tr>));\n    });\n    return result;\n  }\n\n  checkTask (taskStatus, studentTask) {\n    if(taskStatus === \"Checked\") {\n      if(studentTask.timestamp > 0) {\n        return \"done\";\n      } else {\n        return \"fail\";\n      }\n    } else if(taskStatus === \"Checking\") {\n      if(studentTask.timestamp > 0) {\n        return \"done\";\n      } else {\n        return \"checking\";\n      }\n    } else if(taskStatus === \"In Progress\") {\n      return \"in progress\";\n    } else {\n      return \"todo\";\n    }\n  }\n}\n\nexport default Table;\n","import React, { Component } from 'react';\nimport './App.css';\nimport * as jsonResponse from './assets/scoresData.json';\nimport Table from './components/table';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lastMentorId: localStorage.getItem(\"lastMentorId\"),\n      mentorsGitId: Object.keys(jsonResponse.gitMentorIdToName),\n      students: jsonResponse.students,\n      tasks: jsonResponse.tasks,\n      mentors: jsonResponse.mentors,\n      gitMentorIdToName: jsonResponse.gitMentorIdToName\n    }\n  }\n\n  submit(e) {\n    const input = e.target.children[0];\n    window.localStorage.setItem(\"lastMentorId\", input.value)\n    this.setState({\n      lastMentorId: input.value\n    });\n  }\n\n  render() {\n    const names = this.state.mentorsGitId;\n    const tasks = this.state.tasks;\n    const mentor = this.state.mentors[this.state.gitMentorIdToName[this.state.lastMentorId]];\n    const students = {};\n    if(mentor) {\n      mentor.students.forEach((value) => {\n        students[value] = this.state.students[value];\n      })\n    }\n    return (\n      <div className=\"App\">\n        <form onSubmit={this.submit.bind(this)}>\n          <input type=\"text\" list=\"data\" defaultValue={this.state.lastMentorId}/>\n          <button>Search</button>\n        </form>\n        <datalist id=\"data\">\n          {names.map((item) =>\n            <option key={item} value={item} />\n          )}\n        </datalist>\n        <Table \n        students={students} \n        tasks={tasks} \n        mentor={mentor}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}